using System; using System.Collections.Generic; using System.Globalization; using System.Linq; using System.Net.Http; using System.Text; using System.Threading.Tasks; using Microsoft.AspNetCore.Mvc; using Newtonsoft.Json; using Original.OpenBank.Service.Model;  namespace Original.OpenBank.Service.Controllers {     [Route("api/data")]     public class DataController : BaseController     {         public DataController()         {         }          [HttpGet]         public async Task<MLResponse> GetData()         {             var balanceController = new BalanceController(base.GetToken());             var balanceHistory = await balanceController.GetHistory(DateTime.Today.AddYears(-6).ToString("yyyyMMdd"), DateTime.Today.ToString("yyyyMMdd"));              if (balanceHistory == null)                 return null;              foreach (var item in balanceHistory)             {                 item.TransacionAmountDecimal = decimal.Parse(item.transaction_amount);                 item.DateDateTime = DateTime.ParseExact(item.date, "yyyyMMdd", CultureInfo.CurrentCulture);             }              var firstDate = balanceHistory.OrderBy(x => x.DateDateTime).First().DateDateTime;             var lastMonthTransactions = balanceHistory.Where(x => x.DateDateTime > DateTime.Now.AddMonths(-3)).Count() / 3;              var lastMonthBalance = balanceHistory.Where(x => x.DateDateTime > DateTime.Now.AddDays(-30)).Sum(x => x.TransacionAmountDecimal);             var lastLastMonthBalance = balanceHistory.Where(x => x.DateDateTime > DateTime.Now.AddDays(-60) && x.DateDateTime <= DateTime.Now.AddDays(-30)).Sum(x => x.TransacionAmountDecimal);              var balanceTrend = 0;             if (lastMonthBalance > lastLastMonthBalance)                 balanceTrend = 1;             else if (lastMonthBalance < lastLastMonthBalance)                 balanceTrend = -1;              var investmentController = new InvestimentoController(base.GetToken());             var investment_trend = await investmentController.EvolucaoInvestimento(DateTime.Now.AddYears(-6).ToString("yyyyMMdd"), DateTime.Now.ToString("yyyyMMdd"));             var has_investment = await investmentController.TemInvestimento();              var random = new Random();              var r = new MLRequest();             r.Inputs.input1.ColumnNames.Add("qtd_trans_mes");             r.Inputs.input1.ColumnNames.Add("tempo_casa");             r.Inputs.input1.ColumnNames.Add("tendencia_saldo");             r.Inputs.input1.ColumnNames.Add("investidor");             r.Inputs.input1.ColumnNames.Add("tendencia_investimento");             r.Inputs.input1.ColumnNames.Add("idade");             r.Inputs.input1.ColumnNames.Add("encerrou_conta");              var goHorseList = new List<string>();             goHorseList.Add(lastMonthTransactions.ToString());             goHorseList.Add(((int)DateTime.Now.Subtract(firstDate.Date).Days / 30).ToString());             goHorseList.Add(balanceTrend.ToString());             goHorseList.Add(has_investment ? "1" : "0");             goHorseList.Add(investment_trend.ToString());             goHorseList.Add(random.Next(18, 41).ToString());             goHorseList.Add("0");              r.Inputs.input1.Values.Add(goHorseList);              var client = new HttpClient();             var requestBody = JsonConvert.SerializeObject(r);             client.DefaultRequestHeaders.Add("Authorization", "Bearer Rt/+xjyxpGNaIC70ICZblBsmp1afPTnWLO+yxH4Kv1DVfmSVm6PXGMOP0NEARk1jKBMskFchoGk5fQvn5wPimw==");             var mlResponse = await client.PostAsync("https://ussouthcentral.services.azureml.net/workspaces/271e2f65c2a4436989e58d57c424a6ba/services/cf18fd70e61e4bfbb8771adb6924d6d4/execute?api-version=2.0&details=true", new StringContent(requestBody, Encoding.UTF8, "application/json"));              return JsonConvert.DeserializeObject<MLResponse>(await mlResponse.Content.ReadAsStringAsync());         }     } }  